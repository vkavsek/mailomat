name: Rust

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.7.4
  SQLX_FEATURES: "rustls,postgres"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    # Service containers to run with the 'test' container job
    services: 
      postgres: 
        image: postgres:16
        env: 
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        # When you map ports using the ports keyword, GitHub uses the --publish command to publish the containerâ€™s ports to the Docker host
        # Opens tcp port 5432 on the host and service container
        ports: 
          - 5432:5432
    steps:
      - uses: rui314/setup-mold@v1
      # Downloads a copy of the code in your repository before running CI tests
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      # A GitHub Action that implements smart caching for rust/cargo projects with sensible defaults.
      - uses: Swatinem/rust-cache@v2
        with: 
          # An additional cache key that is added alonside the automatic 'job' based cache key. Default: empty
          key: sqlx-${{ env.SQLX_VERSION }}

      - name: Install sqlx-cli
        run:
            cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
            # The --locked flag can be used to force Cargo to use the packaged Cargo.lock file if it is available. 
            # This may be useful for ensuring reproducible builds, to use the exact same set of dependencies that were available when the package was published. 
            # It may also be useful if a newer version of a dependency is published that no longer builds on your system, or has other problems

      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y

      - name: Migrate database
        run: SKIP_DOCKER=true SKIP_DB_RESET=true ./scripts/init_docker_db.sh
      - name: Run tests
        run: TEST_LOG=info cargo test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    services: 
      postgres: 
        image: postgres:16
        env: 
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports: 
          - 5432:5432
    steps:
      - uses: rui314/setup-mold@v1
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true SKIP_DB_RESET=true ./scripts/init_docker_db.sh
      - name: Linting
        run: cargo clippy -- -D warnings

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: [test, fmt, clippy]
    concurrency: deploy-group
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
